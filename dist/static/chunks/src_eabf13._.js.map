{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/rungeecodes/Desktop/falcon-web/src/config/axios.config.ts"],"sourcesContent":["import axios from \"axios\"\n\nconst baseURL = process.env.NEXT_PUBLIC_API_URL ?? \"https://falcon-api.lyticaltechserver.com/api\"\n\nexport const axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Request interceptor for API calls\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const token = localStorage.getItem(\"auth-token\")\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\n// Response interceptor for API calls\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config\n\n    // If the error status is 401 and there is no originalRequest._retry flag,\n    // it means the token has expired and we need to refresh it\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true\n\n      try {\n        const refreshToken = localStorage.getItem(\"refresh-token\")\n        const response = await axios.post(`${baseURL}/Auth/refresh-token`, { refreshToken })\n        const { token } = response.data\n\n        localStorage.setItem(\"auth-token\", token)\n\n        // Retry the original request with the new token\n        originalRequest.headers[\"Authorization\"] = `Bearer ${token}`\n        return axiosInstance(originalRequest)\n      } catch {\n        // If refresh token fails, redirect to login\n        localStorage.removeItem(\"auth-token\")\n        localStorage.removeItem(\"refresh-token\")\n        window.location.href = \"/login\"\n      }\n    }\n\n    return Promise.reject(error)\n  },\n)\n\nexport default axiosInstance;\n"],"names":[],"mappings":";;;;AAEgB;AAFhB;;AAEA,MAAM,UAAU,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI;AAE5C,MAAM,gBAAgB,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACxC;IACA,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,oCAAoC;AACpC,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,OAAO;IACL,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,OAAO;IACrD;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,qCAAqC;AACrC,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAC,WAAa,UACd,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IAEpC,0EAA0E;IAC1E,2DAA2D;IAC3D,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC,gBAAgB,MAAM,EAAE;QAC5D,gBAAgB,MAAM,GAAG;QAEzB,IAAI;YACF,MAAM,eAAe,aAAa,OAAO,CAAC;YAC1C,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,mBAAmB,CAAC,EAAE;gBAAE;YAAa;YAClF,MAAM,EAAE,KAAK,EAAE,GAAG,SAAS,IAAI;YAE/B,aAAa,OAAO,CAAC,cAAc;YAEnC,gDAAgD;YAChD,gBAAgB,OAAO,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,OAAO;YAC5D,OAAO,cAAc;QACvB,EAAE,OAAM;YACN,4CAA4C;YAC5C,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB;IACF;IAEA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/rungeecodes/Desktop/falcon-web/src/services/authServices.ts"],"sourcesContent":["import axiosInstance from \"@/config/axios.config\";\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  accountType: string;\n  phone: string;\n}\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  message: string;\n  data?: {\n    user: {\n      id: string;\n      email: string;\n      name: string;\n    };\n    token: string;\n    refreshToken: string;\n  };\n}\n\nexport interface VerifyEmailData {\n  verificationCode: string;\n  email: string;\n}\n\nexport interface ResetPasswordData {\n  email: string;\n  code: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport async function register(data: RegisterData): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\n    \"/Auth/register\",\n    data\n  );\n  return response.data;\n}\n\nexport async function login(data: LoginData): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\"/Auth/login\", data);\n  if (response.data.success && response.data.data) {\n    localStorage.setItem(\"auth-token\", response.data.data.token);\n    localStorage.setItem(\"refresh-token\", response.data.data.refreshToken);\n  }\n  return response.data;\n}\n\nexport async function logout(): Promise<void> {\n  await axiosInstance.delete(\"/Auth/logout\");\n  localStorage.removeItem(\"auth-token\");\n  localStorage.removeItem(\"refresh-token\");\n}\n\nexport async function forgotPassword(email: string): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\n    \"/Auth/forgot-password\",\n    { email }\n  );\n  return response.data;\n}\n\nexport async function resetPassword(\n  data: ResetPasswordData\n): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\n    \"/Auth/reset-password\",\n    data\n  );\n  return response.data;\n}\n\nexport async function verifyEmail(\n  token: string,\n  email: string\n): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\n    \"/Auth/email-verify\",\n    { verificationCode: token, email }\n  );\n  return response.data;\n}\n\nexport async function enableTwoFactor(): Promise<AuthResponse> {\n  const response = await axiosInstance.put<AuthResponse>(\n    \"/Auth/enable-twofactor\"\n  );\n  return response.data;\n}\n\nexport async function verifyTwoFactor(code: string): Promise<AuthResponse> {\n  const response = await axiosInstance.post<AuthResponse>(\n    \"/Auth/two-factor-verification\",\n    { code }\n  );\n  return response.data;\n}\n\nexport async function checkToken(): Promise<boolean> {\n  try {\n    await axiosInstance.get(\"/Auth/refresh-token\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AA2CO,eAAe,SAAS,IAAkB;IAC/C,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CACvC,kBACA;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,MAAM,IAAe;IACzC,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CAAe,eAAe;IACvE,IAAI,SAAS,IAAI,CAAC,OAAO,IAAI,SAAS,IAAI,CAAC,IAAI,EAAE;QAC/C,aAAa,OAAO,CAAC,cAAc,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK;QAC3D,aAAa,OAAO,CAAC,iBAAiB,SAAS,IAAI,CAAC,IAAI,CAAC,YAAY;IACvE;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe;IACpB,MAAM,mIAAA,CAAA,UAAa,CAAC,MAAM,CAAC;IAC3B,aAAa,UAAU,CAAC;IACxB,aAAa,UAAU,CAAC;AAC1B;AAEO,eAAe,eAAe,KAAa;IAChD,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CACvC,yBACA;QAAE;IAAM;IAEV,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,cACpB,IAAuB;IAEvB,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CACvC,wBACA;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,YACpB,KAAa,EACb,KAAa;IAEb,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CACvC,sBACA;QAAE,kBAAkB;QAAO;IAAM;IAEnC,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe;IACpB,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,GAAG,CACtC;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,gBAAgB,IAAY;IAChD,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAa,CAAC,IAAI,CACvC,iCACA;QAAE;IAAK;IAET,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,mIAAA,CAAA,UAAa,CAAC,GAAG,CAAC;QACxB,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/rungeecodes/Desktop/falcon-web/src/redux/slices/authSlice/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\nimport * as authService from \"../../../services/authServices\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean\n}\n\nconst initialState: AuthState = {\n  user: null,\n  loading: false,\n  error: null,\n  isAuthenticated: false\n};\n\nexport const checkAuth = createAsyncThunk(\"auth/checkAuth\", async (_, { rejectWithValue }) => {\n  try {\n    const isValid = await authService.checkToken()\n    if (!isValid) {\n      throw new Error(\"Token is invalid\")\n    }\n    return { id: \"1\", email: \"user@example.com\", name: \"User\" } // Replace with actual user data\n  } catch (error) {\n    return rejectWithValue((error as Error).message)\n  }\n})\n\nexport const login = createAsyncThunk(\n  \"auth/login\",\n  async (credentials: authService.LoginData) => {\n    const response = await authService.login(credentials);\n    if (!response.success) throw new Error(response.message);\n    return response.data?.user;\n  }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(checkAuth.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(\n        checkAuth.fulfilled,\n        (state, action: PayloadAction<User | undefined>) => {\n          state.loading = false;\n          state.user = action.payload || null;\n          state.isAuthenticated = !!action.payload\n        }\n      )\n      .addCase(checkAuth.rejected, (state) => {\n        state.loading = false;\n        state.user = null;\n      })\n      .addCase(login.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(\n        login.fulfilled,\n        (state, action: PayloadAction<User | undefined>) => {\n          state.loading = false;\n          state.user = action.payload || null;\n          state.isAuthenticated = true\n        }\n      )\n      .addCase(login.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message ?? \"Login failed\";\n      })\n      .addCase(logout.fulfilled, (state) => {\n        state.user = null;\n        state.isAuthenticated = false\n      })\n  },\n});\n\nexport default authSlice.reducer;\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;;AAiBA,MAAM,eAA0B;IAC9B,MAAM;IACN,SAAS;IACT,OAAO;IACP,iBAAiB;AACnB;AAEO,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,kBAAkB,OAAO,GAAG,EAAE,eAAe,EAAE;IACvF,IAAI;QACF,MAAM,UAAU,MAAM,mIAAY,UAAU;QAC5C,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QACA,OAAO;YAAE,IAAI;YAAK,OAAO;YAAoB,MAAM;QAAO,EAAE,gCAAgC;;IAC9F,EAAE,OAAO,OAAO;QACd,OAAO,gBAAgB,AAAC,MAAgB,OAAO;IACjD;AACF;AAEO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAClC,cACA,OAAO;IACL,MAAM,WAAW,MAAM,mIAAY,KAAK,CAAC;IACzC,IAAI,CAAC,SAAS,OAAO,EAAE,MAAM,IAAI,MAAM,SAAS,OAAO;IACvD,OAAO,SAAS,IAAI,EAAE;AACxB;AAGK,MAAM,SAAS,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,eAAe;IACpD,MAAM,mIAAY,MAAM;AAC1B;AAEA,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACd,QACG,OAAO,CAAC,UAAU,OAAO,EAAE,CAAC;YAC3B,MAAM,OAAO,GAAG;QAClB,GACC,OAAO,CACN,UAAU,SAAS,EACnB,CAAC,OAAO;YACN,MAAM,OAAO,GAAG;YAChB,MAAM,IAAI,GAAG,OAAO,OAAO,IAAI;YAC/B,MAAM,eAAe,GAAG,CAAC,CAAC,OAAO,OAAO;QAC1C,GAED,OAAO,CAAC,UAAU,QAAQ,EAAE,CAAC;YAC5B,MAAM,OAAO,GAAG;YAChB,MAAM,IAAI,GAAG;QACf,GACC,OAAO,CAAC,MAAM,OAAO,EAAE,CAAC;YACvB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB,GACC,OAAO,CACN,MAAM,SAAS,EACf,CAAC,OAAO;YACN,MAAM,OAAO,GAAG;YAChB,MAAM,IAAI,GAAG,OAAO,OAAO,IAAI;YAC/B,MAAM,eAAe,GAAG;QAC1B,GAED,OAAO,CAAC,MAAM,QAAQ,EAAE,CAAC,OAAO;YAC/B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,KAAK,CAAC,OAAO,IAAI;QACxC,GACC,OAAO,CAAC,OAAO,SAAS,EAAE,CAAC;YAC1B,MAAM,IAAI,GAAG;YACb,MAAM,eAAe,GAAG;QAC1B;IACJ;AACF;uCAEe,UAAU,OAAO"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/rungeecodes/Desktop/falcon-web/src/redux/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport authReducer from \"./slices/authSlice/authSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,MAAM,mJAAA,CAAA,UAAW;IACnB;AACF"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///Users/rungeecodes/Desktop/falcon-web/src/redux/provider.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\n\nimport { Provider } from \"react-redux\"\nimport { store } from \"./store\"\n\nexport function Providers({ children }: { readonly children: React.ReactNode }) {\n  return <Provider store={store}>{children}</Provider>\n}\n"],"names":[],"mappings":";;;;AAKA;AADA;AAJA;;;;AAOO,SAAS,UAAU,EAAE,QAAQ,EAA0C;IAC5E,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,wHAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFgB"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}