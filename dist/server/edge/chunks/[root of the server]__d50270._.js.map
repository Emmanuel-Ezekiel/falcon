{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\nimport type { NextRequest } from \"next/server\"\n\n// Add paths that don't require authentication\nconst publicPaths = [\n  \"/login\",\n  \"/register\",\n  \"/forgot-password\",\n  \"/reset-password\",\n  \"/verify-email\",\n]\n\nexport function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl\n  const token = request.cookies.get(\"auth-token\")?.value\n\n  // Check if the path is public\n  const isPublicPath = publicPaths.some((path) => pathname.startsWith(path))\n\n  // Redirect authenticated users away from auth pages\n  if (isPublicPath && token) {\n    return NextResponse.redirect(new URL(\"/dashboard\", request.url))\n  }\n\n  // Redirect unauthenticated users to login\n  if (!isPublicPath && !token) {\n    const loginUrl = new URL(\"/login\", request.url)\n    return NextResponse.redirect(loginUrl)\n  }\n\n  return NextResponse.next()\n}\n\n// Configure paths that should be checked by middleware\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - api routes\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!api|_next/static|_next/image|favicon.ico|public).*)\",\n  ],\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,8CAA8C;AAC9C,MAAM,cAAc;IAClB;IACA;IACA;IACA;IACA;CACD;AAEM,SAAS,WAAW,OAAoB;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;IAEjD,8BAA8B;IAC9B,MAAM,eAAe,YAAY,IAAI,CAAC,CAAC,OAAS,SAAS,UAAU,CAAC;IAEpE,oDAAoD;IACpD,IAAI,gBAAgB,OAAO;QACzB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,0CAA0C;IAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO;QAC3B,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}